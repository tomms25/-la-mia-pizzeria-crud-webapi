// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using la_mia_pizzeria_crud_mvc.Models;
using System.Reflection.Emit;

#nullable disable

namespace la_mia_pizzeria_crud_mvc.Migrations
{
    [DbContext(typeof(PizzaContext))]
    [Migration("20230417123528_CreateIdentityTables")]
    partial class CreateIdentityTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IngredientPizza", b =>
            {
                b.Property<long>("IngredientsId")
                    .HasColumnType("bigint");
                b.Property<long>("PizzasId")
                    .HasColumnType("bigint");
                b.HasKey("IngredientsId", "PizzasId");
                b.HasIndex("PizzasId");
                b.ToTable("IngredientPizza");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");
                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("nvarchar(max)");
                b.Property<string>("Name")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");
                b.Property<string>("NormalizedName")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");
                b.HasKey("Id");
                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasDatabaseName("RoleNameIndex")
                    .HasFilter("[NormalizedName] IS NOT NULL");
                b.ToTable("AspNetRoles", (string)null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");
                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));
                b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(max)");
                b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(max)");
                b.Property<string>("RoleId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");
                b.HasKey("Id");
                b.HasIndex("RoleId");
                b.ToTable("AspNetRoleClaims", (string)null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");
                b.Property<int>("AccessFailedCount")
                    .HasColumnType("int");
                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("nvarchar(max)");
                b.Property<string>("Email")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");
                b.Property<bool>("EmailConfirmed")
                    .HasColumnType("bit");
                b.Property<bool>("LockoutEnabled")
                    .HasColumnType("bit");
                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("datetimeoffset");
                b.Property<string>("NormalizedEmail")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");
                b.Property<string>("NormalizedUserName")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");
                b.Property<string>("PasswordHash")
                    .HasColumnType("nvarchar(max)");
                b.Property<string>("PhoneNumber")
                    .HasColumnType("nvarchar(max)");
                b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("bit");
                b.Property<string>("SecurityStamp")
                    .HasColumnType("nvarchar(max)");
                b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("bit");
                b.Property<string>("UserName")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");
                b.HasKey("Id");
                b.HasIndex("NormalizedEmail")
                    .HasDatabaseName("EmailIndex");
                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasDatabaseName("UserNameIndex")
                    .HasFilter("[NormalizedUserName] IS NOT NULL");
                b.ToTable("AspNetUsers", (string)null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");
                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));
                b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(max)");
                b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(max)");
                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");
                b.HasKey("Id");
                b.HasIndex("UserId");
                b.ToTable("AspNetUserClaims", (string)null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.Property<string>("LoginProvider")
                    .HasColumnType("nvarchar(450)");
                b.Property<string>("ProviderKey")
                    .HasColumnType("nvarchar(450)");
                b.Property<string>("ProviderDisplayName")
                    .HasColumnType("nvarchar(max)");
                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");
                b.HasKey("LoginProvider", "ProviderKey");
                b.HasIndex("UserId");
                b.ToTable("AspNetUserLogins", (string)null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");
                b.Property<string>("RoleId")
                    .HasColumnType("nvarchar(450)");
                b.HasKey("UserId", "RoleId");
                b.HasIndex("RoleId");
                b.ToTable("AspNetUserRoles", (string)null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");
                b.Property<string>("LoginProvider")
                    .HasColumnType("nvarchar(450)");
                b.Property<string>("Name")
                    .HasColumnType("nvarchar(450)");
                b.Property<string>("Value")
                    .HasColumnType("nvarchar(max)");
                b.HasKey("UserId", "LoginProvider", "Name");
                b.ToTable("AspNetUserTokens", (string)null);
            });

            modelBuilder.Entity("la_mia_pizzeria_crud_mvc.Models.Category", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint");
                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));
                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasColumnType("nvarchar(25)");
                b.HasKey("Id");
                b.ToTable("Categories");
            });

            modelBuilder.Entity("la_mia_pizzeria_crud_mvc.Models.Ingredient", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint");
                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));
                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasColumnType("nvarchar(25)");
                b.HasKey("Id");
                b.ToTable("Ingredients");
            });

            modelBuilder.Entity("la_mia_pizzeria_crud_mvc.Models.Pizza", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint");
                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));
                b.Property<long>("CategoryId")
                    .HasColumnType("bigint");
                b.Property<string>("Description")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");
                b.Property<string>("Img")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");
                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasColumnType("nvarchar(25)");
                b.Property<double>("Price")
                    .HasColumnType("float");
                b.HasKey("Id");
                b.HasIndex("CategoryId");
                b.ToTable("Pizzas");
            });

            modelBuilder.Entity("IngredientPizza", b =>
            {
                b.HasOne("la_mia_pizzeria_crud_mvc.Models.Ingredient", null)
                    .WithMany()
                    .HasForeignKey("IngredientsId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
                b.HasOne("la_mia_pizzeria_crud_mvc.Models.Pizza", null)
                    .WithMany()
                    .HasForeignKey("PizzasId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("la_mia_pizzeria_crud_mvc.Models.Pizza", b =>
            {
                b.HasOne("la_mia_pizzeria_crud_mvc.Models.Category", "Category")
                    .WithMany("Pizzas")
                    .HasForeignKey("CategoryId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
                b.Navigation("Category");
            });

            modelBuilder.Entity("la_mia_pizzeria_crud_mvc.Models.Category", b =>
            {
                b.Navigation("Pizzas");
            });
#pragma warning restore 612, 618
        }
    }
}